diff --git a/Python/sysmodule.c b/Python/sysmodule.c
index d68572d..8a0e18e 100644
--- a/Python/sysmodule.c
+++ b/Python/sysmodule.c
@@ -370,7 +370,7 @@ implementation."
 );

 static PyObject *
-sys_getfilesystemencoding(PyObject *self)
+sys_getfilesystemencoding(PyObject *self, void *Py_UNUSED(ignored))
 {
     if (Py_FileSystemDefaultEncoding)
         return PyUnicode_FromString(Py_FileSystemDefaultEncoding);
@@ -387,7 +387,7 @@ operating system filenames."
 );

 static PyObject *
-sys_getfilesystemencodeerrors(PyObject *self)
+sys_getfilesystemencodeerrors(PyObject *self, void *Py_UNUSED(ignored))
 {
     if (Py_FileSystemDefaultEncodeErrors)
         return PyUnicode_FromString(Py_FileSystemDefaultEncodeErrors);
diff --git a/Objects/descrobject.c b/Objects/descrobject.c
index 6014039..470b6ed 100644
--- a/Objects/descrobject.c
+++ b/Objects/descrobject.c
@@ -882,7 +882,7 @@ mappingproxy_values(mappingproxyobject *pp)
 }

 static PyObject *
-mappingproxy_items(mappingproxyobject *pp)
+mappingproxy_items(mappingproxyobject *pp, void *Py_UNUSED(ignored))
 {
     _Py_IDENTIFIER(items);
     return _PyObject_CallMethodId(pp->mapping, &PyId_items, NULL);
diff --git a/Modules/_threadmodule.c b/Modules/_threadmodule.c
index f594bda..70543c7 100644
--- a/Modules/_threadmodule.c
+++ b/Modules/_threadmodule.c
@@ -163,7 +163,7 @@ and the return value reflects whether the lock is acquired.\n\
 The blocking operation is interruptible.");
 
 static PyObject *
-lock_PyThread_release_lock(lockobject *self)
+lock_PyThread_release_lock(lockobject *self, void *Py_UNUSED(ignored))
 {
     /* Sanity check: the lock must be locked */
     if (!self->locked) {
@@ -242,14 +242,14 @@ static PyMemberDef func_memberlist[] = {
  };

  static PyObject *
 -func_get_code(PyFunctionObject *op)
 +func_get_code(PyFunctionObject *op, void *Py_UNUSED(ignored))
  {
      Py_INCREF(op->func_code);
      return op->func_code;
  }

  static int
 -func_set_code(PyFunctionObject *op, PyObject *value)
 +func_set_code(PyFunctionObject *op, PyObject *value, void *Py_UNUSED(ignored))
  {
      Py_ssize_t nfree, nclosure;
@@ -1117,7 +1117,7 @@ A subthread can use this function to interrupt the main thread."
 static lockobject *newlockobject(void);
 
 static PyObject *
-thread_PyThread_allocate_lock(PyObject *self)
+thread_PyThread_allocate_lock(PyObject *self, void *Py_UNUSED(ignored))
 {
     return (PyObject *) newlockobject();
 }
@@ -1130,7 +1130,7 @@ Create a new lock object. See help(type(threading.Lock())) for\n\
 information about locks.");
 
 static PyObject *
-thread_get_ident(PyObject *self)
+thread_get_ident(PyObject *self, void *Py_UNUSED(ignored))
 {
     unsigned long ident = PyThread_get_thread_ident();
     if (ident == PYTHREAD_INVALID_THREAD_ID) {
diff --git a/Objects/dictobject.c b/Objects/dictobject.c
index 7a1bceb..057aba8 100644
--- a/Objects/dictobject.c
+++ b/Objects/dictobject.c
@@ -3051,9 +3051,9 @@ PyDoc_STRVAR(copy__doc__,
 "D.copy() -> a shallow copy of D");

 /* Forward */
-static PyObject *dictkeys_new(PyObject *);
+static PyObject *dictkeys_new(PyObject *, void *);
-static PyObject *dictitems_new(PyObject *);
+static PyObject *dictitems_new(PyObject *, void *);
-static PyObject *dictvalues_new(PyObject *);
+static PyObject *dictvalues_new(PyObject *, void *);

 PyDoc_STRVAR(keys__doc__,
              "D.keys() -> a set-like object providing a view on D's keys");
@@ -3361,7 +3361,7 @@ dictiter_traverse(dictiterobject *di, visitproc visit, void *arg)
 }

 static PyObject *
-dictiter_len(dictiterobject *di)
+dictiter_len(dictiterobject *di, void *Py_UNUSED(ignored))
 {
     Py_ssize_t len = 0;
     if (di->di_dict != NULL && di->di_used == di->di_dict->ma_used)
@@ -4092,7 +4092,7 @@ PyTypeObject PyDictKeys_Type = {
 };

 static PyObject *
-dictkeys_new(PyObject *dict)
+dictkeys_new(PyObject *dict, void *Py_UNUSED(ignored))
 {
     return _PyDictView_New(dict, &PyDictKeys_Type);
 }
@@ -4182,7 +4182,7 @@ PyTypeObject PyDictItems_Type = {
 };
 
 static PyObject *
-dictitems_new(PyObject *dict)
+dictitems_new(PyObject *dict, void *Py_UNUSED(ignored))
 {
     return _PyDictView_New(dict, &PyDictItems_Type);
 }
@@ -4247,7 +4247,7 @@ PyTypeObject PyDictValues_Type = {
 };

 static PyObject *
-dictvalues_new(PyObject *dict)
+dictvalues_new(PyObject *dict, void *Py_UNUSED(ignored))
 {
     return _PyDictView_New(dict, &PyDictValues_Type);
 }
diff --git a/Objects/fileobject.c b/Objects/fileobject.c
index 0f71944..456471b 100644
--- a/Objects/fileobject.c
+++ b/Objects/fileobject.c
@@ -411,7 +411,7 @@ stdprinter_repr(PyStdPrinter_Object *self)
 }
 
 static PyObject *
-stdprinter_noop(PyStdPrinter_Object *self)
+stdprinter_noop(PyStdPrinter_Object *self, void *Py_UNUSED(ignored))
 {
     Py_RETURN_NONE;
 }
diff --git a/Objects/funcobject.c b/Objects/funcobject.c
index 241685d..f1e273c 100644
--- a/Objects/funcobject.c
+++ b/Objects/funcobject.c
@@ -277,14 +277,14 @@ func_set_code(PyFunctionObject *op, PyObject *value)
 }
 
 static PyObject *
-func_get_name(PyFunctionObject *op)
+func_get_name(PyFunctionObject *op, void *Py_UNUSED(ignored))
 {
     Py_INCREF(op->func_name);
     return op->func_name;
 }
 
 static int
-func_set_name(PyFunctionObject *op, PyObject *value)
+func_set_name(PyFunctionObject *op, PyObject *value, void *Py_UNUSED(ignored))
 {
     /* Not legal to del f.func_name or to set it to anything
      * other than a string object. */
@@ -299,14 +299,14 @@ func_set_name(PyFunctionObject *op, PyObject *value)
 }
 
 static PyObject *
-func_get_qualname(PyFunctionObject *op)
+func_get_qualname(PyFunctionObject *op, void *Py_UNUSED(ignored))
 {
     Py_INCREF(op->func_qualname);
     return op->func_qualname;
 }
 
 static int
-func_set_qualname(PyFunctionObject *op, PyObject *value)
+func_set_qualname(PyFunctionObject *op, PyObject *value, void *Py_UNUSED(ignored))
 {
     /* Not legal to del f.__qualname__ or to set it to anything
      * other than a string object. */
-- 
2.17.1

