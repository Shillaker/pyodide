diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index c3682b4..7330522 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -1443,6 +1443,7 @@ path_object_error2(PyObject *path, PyObject *path2)
 #endif
 }
 
+__attribute__((noinline))
 static PyObject *
 path_error(path_t *path)
 {
@@ -1477,11 +1478,11 @@ posix_fildes_fd(int fd, int (*func)(int))
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         res = (*func)(fd);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res != 0)
         return (!async_err) ? posix_error() : NULL;
@@ -2097,7 +2098,7 @@ posix_do_stat(const char *function_name, path_t *path,
         fd_and_follow_symlinks_invalid("stat", path->fd, follow_symlinks))
         return NULL;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     if (path->fd != -1)
         result = FSTAT(path->fd, &st);
 #ifdef MS_WINDOWS
@@ -2120,7 +2121,7 @@ posix_do_stat(const char *function_name, path_t *path,
 #endif /* HAVE_FSTATAT */
         result = STAT(path->narrow, &st);
 #endif /* MS_WINDOWS */
-    Py_END_ALLOW_THREADS
+    
 
     if (result != 0) {
         return path_error(path);
@@ -2555,9 +2556,9 @@ os_access_impl(PyObject *module, path_t *path, int mode, int dir_fd,
 #endif
 
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     attr = GetFileAttributesW(path->wide);
-    Py_END_ALLOW_THREADS
+    
 
     /*
      * Access is possible if
@@ -2573,7 +2574,7 @@ os_access_impl(PyObject *module, path_t *path, int mode, int dir_fd,
             (attr & FILE_ATTRIBUTE_DIRECTORY));
 #else
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_FACCESSAT
     if ((dir_fd != DEFAULT_DIR_FD) ||
         effective_ids ||
@@ -2588,7 +2589,7 @@ os_access_impl(PyObject *module, path_t *path, int mode, int dir_fd,
     else
 #endif
         result = access(path->narrow, mode);
-    Py_END_ALLOW_THREADS
+    
     return_value = !result;
 #endif
 
@@ -2678,7 +2679,7 @@ os_chdir_impl(PyObject *module, path_t *path)
 {
     int result;
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef MS_WINDOWS
     /* on unix, success = 0, on windows, success = !0 */
     result = !win32_wchdir(path->wide);
@@ -2690,7 +2691,7 @@ os_chdir_impl(PyObject *module, path_t *path)
 #endif
         result = chdir(path->narrow);
 #endif
-    Py_END_ALLOW_THREADS
+    
 
     if (result) {
         return path_error(path);
@@ -2775,7 +2776,7 @@ os_chmod_impl(PyObject *module, path_t *path, int mode, int dir_fd,
 #endif
 
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     attr = GetFileAttributesW(path->wide);
     if (attr == INVALID_FILE_ATTRIBUTES)
         result = 0;
@@ -2786,13 +2787,13 @@ os_chmod_impl(PyObject *module, path_t *path, int mode, int dir_fd,
             attr |= FILE_ATTRIBUTE_READONLY;
         result = SetFileAttributesW(path->wide, attr);
     }
-    Py_END_ALLOW_THREADS
+    
 
     if (!result) {
         return path_error(path);
     }
 #else /* MS_WINDOWS */
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_FCHMOD
     if (path->fd != -1)
         result = fchmod(path->fd, mode);
@@ -2829,7 +2830,7 @@ os_chmod_impl(PyObject *module, path_t *path, int mode, int dir_fd,
     else
 #endif
         result = chmod(path->narrow, mode);
-    Py_END_ALLOW_THREADS
+    
 
     if (result) {
 #ifdef HAVE_FCHMODAT
@@ -2871,9 +2872,9 @@ os_fchmod_impl(PyObject *module, int fd, int mode)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = fchmod(fd, mode);
-        Py_END_ALLOW_THREADS
+        
     } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res != 0)
         return (!async_err) ? posix_error() : NULL;
@@ -2901,9 +2902,9 @@ os_lchmod_impl(PyObject *module, path_t *path, int mode)
 /*[clinic end generated code: output=082344022b51a1d5 input=90c5663c7465d24f]*/
 {
     int res;
-    Py_BEGIN_ALLOW_THREADS
+    
     res = lchmod(path->narrow, mode);
-    Py_END_ALLOW_THREADS
+    
     if (res < 0) {
         path_error(path);
         return NULL;
@@ -2943,14 +2944,14 @@ os_chflags_impl(PyObject *module, path_t *path, unsigned long flags,
         return NULL;
 #endif
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_LCHFLAGS
     if (!follow_symlinks)
         result = lchflags(path->narrow, flags);
     else
 #endif
         result = chflags(path->narrow, flags);
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error(path);
@@ -2978,9 +2979,9 @@ os_lchflags_impl(PyObject *module, path_t *path, unsigned long flags)
 /*[clinic end generated code: output=30ae958695c07316 input=f9f82ea8b585ca9d]*/
 {
     int res;
-    Py_BEGIN_ALLOW_THREADS
+    
     res = lchflags(path->narrow, flags);
-    Py_END_ALLOW_THREADS
+    
     if (res < 0) {
         return path_error(path);
     }
@@ -3003,9 +3004,9 @@ os_chroot_impl(PyObject *module, path_t *path)
 /*[clinic end generated code: output=de80befc763a4475 input=14822965652c3dc3]*/
 {
     int res;
-    Py_BEGIN_ALLOW_THREADS
+    
     res = chroot(path->narrow);
-    Py_END_ALLOW_THREADS
+    
     if (res < 0)
         return path_error(path);
     Py_RETURN_NONE;
@@ -3042,9 +3043,9 @@ static PyObject *
 os_sync_impl(PyObject *module)
 /*[clinic end generated code: output=2796b1f0818cd71c input=84749fe5e9b404ff]*/
 {
-    Py_BEGIN_ALLOW_THREADS
+    
     sync();
-    Py_END_ALLOW_THREADS
+    
     Py_RETURN_NONE;
 }
 #endif /* HAVE_SYNC */
@@ -3140,7 +3141,7 @@ os_chown_impl(PyObject *module, path_t *path, uid_t uid, gid_t gid,
     }
 #endif
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_FCHOWN
     if (path->fd != -1)
         result = fchown(path->fd, uid, gid);
@@ -3158,7 +3159,7 @@ os_chown_impl(PyObject *module, path_t *path, uid_t uid, gid_t gid,
     else
 #endif
         result = chown(path->narrow, uid, gid);
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error(path);
@@ -3190,9 +3191,9 @@ os_fchown_impl(PyObject *module, int fd, uid_t uid, gid_t gid)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = fchown(fd, uid, gid);
-        Py_END_ALLOW_THREADS
+        
     } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res != 0)
         return (!async_err) ? posix_error() : NULL;
@@ -3221,9 +3222,9 @@ os_lchown_impl(PyObject *module, path_t *path, uid_t uid, gid_t gid)
 /*[clinic end generated code: output=25eaf6af412fdf2f input=b1c6014d563a7161]*/
 {
     int res;
-    Py_BEGIN_ALLOW_THREADS
+    
     res = lchown(path->narrow, uid, gid);
-    Py_END_ALLOW_THREADS
+    
     if (res < 0) {
         return path_error(path);
     }
@@ -3247,7 +3248,7 @@ posix_getcwd(int use_bytes)
         wchar_t *wbuf2 = wbuf;
         PyObject *resobj;
         DWORD len;
-        Py_BEGIN_ALLOW_THREADS
+        
         len = GetCurrentDirectoryW(Py_ARRAY_LENGTH(wbuf), wbuf);
         /* If the buffer is large enough, len does not include the
            terminating \0. If the buffer is too small, len includes
@@ -3257,7 +3258,7 @@ posix_getcwd(int use_bytes)
             if (wbuf2)
                 len = GetCurrentDirectoryW(len, wbuf2);
         }
-        Py_END_ALLOW_THREADS
+        
         if (!wbuf2) {
             PyErr_NoMemory();
             return NULL;
@@ -3278,7 +3279,7 @@ posix_getcwd(int use_bytes)
 #endif
 
     buf = cwd = NULL;
-    Py_BEGIN_ALLOW_THREADS
+    
     do {
         buflen += chunk;
 #ifdef MS_WINDOWS
@@ -3298,7 +3299,7 @@ posix_getcwd(int use_bytes)
         cwd = getcwd(buf, buflen);
 #endif
     } while (cwd == NULL && errno == ERANGE);
-    Py_END_ALLOW_THREADS
+    
 
     if (cwd == NULL) {
         PyMem_RawFree(buf);
@@ -3399,14 +3400,14 @@ os_link_impl(PyObject *module, path_t *src, path_t *dst, int src_dir_fd,
 #endif
 
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     result = CreateHardLinkW(dst->wide, src->wide, NULL);
-    Py_END_ALLOW_THREADS
+    
 
     if (!result)
         return path_error2(src, dst);
 #else
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_LINKAT
     if ((src_dir_fd != DEFAULT_DIR_FD) ||
         (dst_dir_fd != DEFAULT_DIR_FD) ||
@@ -3417,7 +3418,7 @@ os_link_impl(PyObject *module, path_t *src, path_t *dst, int src_dir_fd,
     else
 #endif /* HAVE_LINKAT */
         result = link(src->narrow, dst->narrow);
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error2(src, dst);
@@ -3466,9 +3467,9 @@ _listdir_windows_no_opendir(path_t *path, PyObject *list)
     if ((list = PyList_New(0)) == NULL) {
         goto exit;
     }
-    Py_BEGIN_ALLOW_THREADS
+    
     hFindFile = FindFirstFileW(wnamebuf, &wFileData);
-    Py_END_ALLOW_THREADS
+    
     if (hFindFile == INVALID_HANDLE_VALUE) {
         int error = GetLastError();
         if (error == ERROR_FILE_NOT_FOUND)
@@ -3499,9 +3500,9 @@ _listdir_windows_no_opendir(path_t *path, PyObject *list)
             }
             Py_DECREF(v);
         }
-        Py_BEGIN_ALLOW_THREADS
+        
         result = FindNextFileW(hFindFile, &wFileData);
-        Py_END_ALLOW_THREADS
+        
         /* FindNextFile sets error to ERROR_NO_MORE_FILES if
            it got to the end of the directory. */
         if (!result && GetLastError() != ERROR_NO_MORE_FILES) {
@@ -3527,6 +3528,7 @@ exit:
 
 #else  /* thus POSIX, ie: not (MS_WINDOWS and not HAVE_OPENDIR) */
 
+__attribute__((noinline))
 static PyObject *
 _posix_listdir(path_t *path, PyObject *list)
 {
@@ -3538,6 +3540,10 @@ _posix_listdir(path_t *path, PyObject *list)
     int fd = -1;
 #endif
 
+    if ((list = PyList_New(0)) == NULL) {
+        goto exit;
+    }
+
     errno = 0;
 #ifdef HAVE_FDOPENDIR
     if (path->fd != -1) {
@@ -3548,9 +3554,9 @@ _posix_listdir(path_t *path, PyObject *list)
 
         return_str = 1;
 
-        Py_BEGIN_ALLOW_THREADS
+        
         dirp = fdopendir(fd);
-        Py_END_ALLOW_THREADS
+        
     }
     else
 #endif
@@ -3566,30 +3572,26 @@ _posix_listdir(path_t *path, PyObject *list)
             return_str = 1;
         }
 
-        Py_BEGIN_ALLOW_THREADS
+        
         dirp = opendir(name);
-        Py_END_ALLOW_THREADS
+        
     }
 
     if (dirp == NULL) {
         list = path_error(path);
 #ifdef HAVE_FDOPENDIR
         if (fd != -1) {
-            Py_BEGIN_ALLOW_THREADS
+            
             close(fd);
-            Py_END_ALLOW_THREADS
+            
         }
 #endif
         goto exit;
     }
-    if ((list = PyList_New(0)) == NULL) {
-        goto exit;
-    }
+
     for (;;) {
-        errno = 0;
-        Py_BEGIN_ALLOW_THREADS
         ep = readdir(dirp);
-        Py_END_ALLOW_THREADS
+        
         if (ep == NULL) {
             if (errno == 0) {
                 break;
@@ -3621,13 +3623,13 @@ _posix_listdir(path_t *path, PyObject *list)
 
 exit:
     if (dirp != NULL) {
-        Py_BEGIN_ALLOW_THREADS
+        
 #ifdef HAVE_FDOPENDIR
         if (fd > -1)
             rewinddir(dirp);
 #endif
         closedir(dirp);
-        Py_END_ALLOW_THREADS
+        
     }
 
     return list;
@@ -3726,7 +3728,7 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
     int result_length;
     PyObject *result;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     hFile = CreateFileW(
         path->wide,
         0, /* desired access */
@@ -3736,7 +3738,7 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
         /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
         FILE_FLAG_BACKUP_SEMANTICS,
         NULL);
-    Py_END_ALLOW_THREADS
+    
 
     if (hFile == INVALID_HANDLE_VALUE) {
         return win32_error_object("CreateFileW", path->object);
@@ -3745,10 +3747,10 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
     /* We have a good handle to the target, use it to determine the
        target path name. */
     while (1) {
-        Py_BEGIN_ALLOW_THREADS
+        
         result_length = GetFinalPathNameByHandleW(hFile, target_path,
                                                   buf_size, VOLUME_NAME_DOS);
-        Py_END_ALLOW_THREADS
+        
 
         if (!result_length) {
             result = win32_error_object("GetFinalPathNameByHandleW",
@@ -3799,9 +3801,9 @@ os__isdir_impl(PyObject *module, path_t *path)
 {
     DWORD attributes;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     attributes = GetFileAttributesW(path->wide);
-    Py_END_ALLOW_THREADS
+    
 
     if (attributes == INVALID_FILE_ATTRIBUTES)
         Py_RETURN_FALSE;
@@ -3842,10 +3844,10 @@ os__getvolumepathname_impl(PyObject *module, path_t *path)
     if (mountpath == NULL)
         return PyErr_NoMemory();
 
-    Py_BEGIN_ALLOW_THREADS
+    
     ret = GetVolumePathNameW(path->wide, mountpath,
                              Py_SAFE_DOWNCAST(buflen, size_t, DWORD));
-    Py_END_ALLOW_THREADS
+    
 
     if (!ret) {
         result = win32_error_object("_getvolumepathname", path->object);
@@ -3893,14 +3895,14 @@ os_mkdir_impl(PyObject *module, path_t *path, int mode, int dir_fd)
     int result;
 
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     result = CreateDirectoryW(path->wide, NULL);
-    Py_END_ALLOW_THREADS
+    
 
     if (!result)
         return path_error(path);
 #else
-    Py_BEGIN_ALLOW_THREADS
+    
 #if HAVE_MKDIRAT
     if (dir_fd != DEFAULT_DIR_FD)
         result = mkdirat(dir_fd, path->narrow, mode);
@@ -3911,7 +3913,7 @@ os_mkdir_impl(PyObject *module, path_t *path, int mode, int dir_fd)
 #else
         result = mkdir(path->narrow, mode);
 #endif
-    Py_END_ALLOW_THREADS
+    
     if (result < 0)
         return path_error(path);
 #endif /* MS_WINDOWS */
@@ -4038,9 +4040,9 @@ internal_rename(path_t *src, path_t *dst, int src_dir_fd, int dst_dir_fd, int is
 #endif
 
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     result = MoveFileExW(src->wide, dst->wide, flags);
-    Py_END_ALLOW_THREADS
+    
 
     if (!result)
         return path_error2(src, dst);
@@ -4052,14 +4054,14 @@ internal_rename(path_t *src, path_t *dst, int src_dir_fd, int dst_dir_fd, int is
         return NULL;
     }
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_RENAMEAT
     if (dir_fd_specified)
         result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
     else
 #endif
     result = rename(src->narrow, dst->narrow);
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error2(src, dst);
@@ -4137,7 +4139,7 @@ os_rmdir_impl(PyObject *module, path_t *path, int dir_fd)
 {
     int result;
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef MS_WINDOWS
     /* Windows, success=1, UNIX, success=0 */
     result = !RemoveDirectoryW(path->wide);
@@ -4149,7 +4151,7 @@ os_rmdir_impl(PyObject *module, path_t *path, int dir_fd)
 #endif
         result = rmdir(path->narrow);
 #endif
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error(path);
@@ -4173,11 +4175,11 @@ os_system_impl(PyObject *module, Py_UNICODE *command)
 /*[clinic end generated code: output=96c4dffee36dfb48 input=303f5ce97df606b0]*/
 {
     long result;
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
     result = _wsystem(command);
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
     return result;
 }
 #else /* MS_WINDOWS */
@@ -4195,9 +4197,9 @@ os_system_impl(PyObject *module, PyObject *command)
 {
     long result;
     const char *bytes = PyBytes_AsString(command);
-    Py_BEGIN_ALLOW_THREADS
+    
     result = system(bytes);
-    Py_END_ALLOW_THREADS
+    
     return result;
 }
 #endif
@@ -4285,7 +4287,7 @@ os_unlink_impl(PyObject *module, path_t *path, int dir_fd)
 {
     int result;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef MS_WINDOWS
     /* Windows, success=1, UNIX, success=0 */
@@ -4299,7 +4301,7 @@ os_unlink_impl(PyObject *module, path_t *path, int dir_fd)
         result = unlink(path->narrow);
 #endif
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error(path);
@@ -4373,9 +4375,9 @@ os_uname_impl(PyObject *module)
     int res;
     PyObject *value;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     res = uname(&u);
-    Py_END_ALLOW_THREADS
+    
     if (res < 0)
         return posix_error();
 
@@ -4699,11 +4701,11 @@ os_utime_impl(PyObject *module, path_t *path, PyObject *times, PyObject *ns,
 #endif
 
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     hFile = CreateFileW(path->wide, FILE_WRITE_ATTRIBUTES, 0,
                         NULL, OPEN_EXISTING,
                         FILE_FLAG_BACKUP_SEMANTICS, NULL);
-    Py_END_ALLOW_THREADS
+    
     if (hFile == INVALID_HANDLE_VALUE) {
         path_error(path);
         goto exit;
@@ -4726,7 +4728,7 @@ os_utime_impl(PyObject *module, path_t *path, PyObject *times, PyObject *ns,
         goto exit;
     }
 #else /* MS_WINDOWS */
-    Py_BEGIN_ALLOW_THREADS
+    
 
 #ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
     if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
@@ -4748,7 +4750,7 @@ os_utime_impl(PyObject *module, path_t *path, PyObject *times, PyObject *ns,
 
     result = utime_default(&utime, path->narrow);
 
-    Py_END_ALLOW_THREADS
+    
 
     if (result < 0) {
         /* see previous comment about not putting filename in error here */
@@ -5175,7 +5177,7 @@ os_spawnv_impl(PyObject *module, int mode, path_t *path, PyObject *argv)
     if (mode == _OLD_P_OVERLAY)
         mode = _P_OVERLAY;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef HAVE_WSPAWNV
     spawnval = _wspawnv(mode, path->wide, argvlist);
@@ -5183,7 +5185,7 @@ os_spawnv_impl(PyObject *module, int mode, path_t *path, PyObject *argv)
     spawnval = _spawnv(mode, path->narrow, argvlist);
 #endif
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
 
     free_string_array(argvlist, argc);
 
@@ -5280,7 +5282,7 @@ os_spawnve_impl(PyObject *module, int mode, path_t *path, PyObject *argv,
     if (mode == _OLD_P_OVERLAY)
         mode = _P_OVERLAY;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef HAVE_WSPAWNV
     spawnval = _wspawnve(mode, path->wide, argvlist, envlist);
@@ -5288,7 +5290,7 @@ os_spawnve_impl(PyObject *module, int mode, path_t *path, PyObject *argv,
     spawnval = _spawnve(mode, path->narrow, argvlist, envlist);
 #endif
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
 
     if (spawnval == -1)
         (void) posix_error();
@@ -6893,9 +6895,9 @@ os_wait3_impl(PyObject *module, int options)
     WAIT_STATUS_INT(status) = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         pid = wait3(&status, options, &ru);
-        Py_END_ALLOW_THREADS
+        
     } while (pid < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (pid < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -6930,9 +6932,9 @@ os_wait4_impl(PyObject *module, pid_t pid, int options)
     WAIT_STATUS_INT(status) = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = wait4(pid, &status, options, &ru);
-        Py_END_ALLOW_THREADS
+        
     } while (res < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -6972,9 +6974,9 @@ os_waitid_impl(PyObject *module, idtype_t idtype, id_t id, int options)
     si.si_pid = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = waitid(idtype, id, &si, options);
-        Py_END_ALLOW_THREADS
+        
     } while (res < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -7026,9 +7028,9 @@ os_waitpid_impl(PyObject *module, pid_t pid, int options)
     WAIT_STATUS_INT(status) = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = waitpid(pid, &status, options);
-        Py_END_ALLOW_THREADS
+        
     } while (res < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -7060,11 +7062,11 @@ os_waitpid_impl(PyObject *module, intptr_t pid, int options)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         res = _cwait(&status, pid, options);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (res < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -7095,9 +7097,9 @@ os_wait_impl(PyObject *module)
     WAIT_STATUS_INT(status) = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         pid = wait(&status);
-        Py_END_ALLOW_THREADS
+        
     } while (pid < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (pid < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -7138,14 +7140,14 @@ posix_readlink(PyObject *self, PyObject *args, PyObject *kwargs)
                           READLINKAT_DIR_FD_CONVERTER, &dir_fd))
         return NULL;
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_READLINKAT
     if (dir_fd != DEFAULT_DIR_FD)
         length = readlinkat(dir_fd, path.narrow, buffer, MAXPATHLEN);
     else
 #endif
         length = readlink(path.narrow, buffer, MAXPATHLEN);
-    Py_END_ALLOW_THREADS
+    
 
     if (length < 0) {
         return_value = path_error(&path);
@@ -7193,7 +7195,7 @@ win_readlink(PyObject *self, PyObject *args, PyObject *kwargs)
         return NULL;
 
     /* First get a handle to the reparse point */
-    Py_BEGIN_ALLOW_THREADS
+    
     reparse_point_handle = CreateFileW(
         path,
         0,
@@ -7202,12 +7204,12 @@ win_readlink(PyObject *self, PyObject *args, PyObject *kwargs)
         OPEN_EXISTING,
         FILE_FLAG_OPEN_REPARSE_POINT|FILE_FLAG_BACKUP_SEMANTICS,
         0);
-    Py_END_ALLOW_THREADS
+    
 
     if (reparse_point_handle==INVALID_HANDLE_VALUE)
         return win32_error_object("readlink", po);
 
-    Py_BEGIN_ALLOW_THREADS
+    
     /* New call DeviceIoControl to read the reparse point */
     io_result = DeviceIoControl(
         reparse_point_handle,
@@ -7218,7 +7220,7 @@ win_readlink(PyObject *self, PyObject *args, PyObject *kwargs)
         0 /* we're not using OVERLAPPED_IO */
         );
     CloseHandle(reparse_point_handle);
-    Py_END_ALLOW_THREADS
+    
 
     if (io_result==0)
         return win32_error_object("readlink", po);
@@ -7382,14 +7384,14 @@ os_symlink_impl(PyObject *module, path_t *src, path_t *dst,
 
 #ifdef MS_WINDOWS
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
     /* if src is a directory, ensure target_is_directory==1 */
     target_is_directory |= _check_dirW(src->wide, dst->wide);
     result = Py_CreateSymbolicLinkW(dst->wide, src->wide,
                                     target_is_directory);
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
 
     if (!result)
         return path_error2(src, dst);
@@ -7402,14 +7404,14 @@ os_symlink_impl(PyObject *module, path_t *src, path_t *dst,
         return NULL;
     }
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #if HAVE_SYMLINKAT
     if (dir_fd != DEFAULT_DIR_FD)
         result = symlinkat(src->narrow, dir_fd, dst->narrow);
     else
 #endif
         result = symlink(src->narrow, dst->narrow);
-    Py_END_ALLOW_THREADS
+    
 
     if (result)
         return path_error2(src, dst);
@@ -7697,7 +7699,7 @@ os_open_impl(PyObject *module, path_t *path, int flags, int mode, int dir_fd)
 
     _Py_BEGIN_SUPPRESS_IPH
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
 #ifdef MS_WINDOWS
         fd = _wopen(path->wide, flags, mode);
 #else
@@ -7708,7 +7710,7 @@ os_open_impl(PyObject *module, path_t *path, int flags, int mode, int dir_fd)
 #endif /* HAVE_OPENAT */
             fd = open(path->narrow, flags, mode);
 #endif /* !MS_WINDOWS */
-        Py_END_ALLOW_THREADS
+        
     } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     _Py_END_SUPPRESS_IPH
 
@@ -7746,11 +7748,11 @@ os_close_impl(PyObject *module, int fd)
      * and http://linux.derkeiler.com/Mailing-Lists/Kernel/2005-09/3000.html
      * for more details.
      */
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
     res = close(fd);
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
     if (res < 0)
         return posix_error();
     Py_RETURN_NONE;
@@ -7772,12 +7774,12 @@ os_closerange_impl(PyObject *module, int fd_low, int fd_high)
 /*[clinic end generated code: output=0ce5c20fcda681c2 input=5855a3d053ebd4ec]*/
 {
     int i;
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
     for (i = Py_MAX(fd_low, 0); i < fd_high; i++)
         close(i);
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
     Py_RETURN_NONE;
 }
 
@@ -7829,11 +7831,11 @@ os_dup2_impl(PyObject *module, int fd, int fd2, int inheritable)
      * upon close(), and therefore below.
      */
 #ifdef MS_WINDOWS
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
     res = dup2(fd, fd2);
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
     if (res < 0) {
         posix_error();
         return -1;
@@ -7847,12 +7849,12 @@ os_dup2_impl(PyObject *module, int fd, int fd2, int inheritable)
     }
 
 #elif defined(HAVE_FCNTL_H) && defined(F_DUP2FD_CLOEXEC)
-    Py_BEGIN_ALLOW_THREADS
+    
     if (!inheritable)
         res = fcntl(fd, F_DUP2FD_CLOEXEC, fd2);
     else
         res = dup2(fd, fd2);
-    Py_END_ALLOW_THREADS
+    
     if (res < 0) {
         posix_error();
         return -1;
@@ -7862,9 +7864,9 @@ os_dup2_impl(PyObject *module, int fd, int fd2, int inheritable)
 
 #ifdef HAVE_DUP3
     if (!inheritable && dup3_works != 0) {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = dup3(fd, fd2, O_CLOEXEC);
-        Py_END_ALLOW_THREADS
+        
         if (res < 0) {
             if (dup3_works == -1)
                 dup3_works = (errno != ENOSYS);
@@ -7878,9 +7880,9 @@ os_dup2_impl(PyObject *module, int fd, int fd2, int inheritable)
     if (inheritable || dup3_works == 0)
     {
 #endif
-        Py_BEGIN_ALLOW_THREADS
+        
         res = dup2(fd, fd2);
-        Py_END_ALLOW_THREADS
+        
         if (res < 0) {
             posix_error();
             return -1;
@@ -7922,9 +7924,9 @@ os_lockf_impl(PyObject *module, int fd, int command, Py_off_t length)
 {
     int res;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     res = lockf(fd, command, length);
-    Py_END_ALLOW_THREADS
+    
 
     if (res < 0)
         return posix_error();
@@ -7966,7 +7968,7 @@ os_lseek_impl(PyObject *module, int fd, Py_off_t position, int how)
     if (PyErr_Occurred())
         return -1;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef MS_WINDOWS
     result = _lseeki64(fd, position, how);
@@ -7974,7 +7976,7 @@ os_lseek_impl(PyObject *module, int fd, Py_off_t position, int how)
     result = lseek(fd, position, how);
 #endif
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
     if (result < 0)
         posix_error();
 
@@ -8126,9 +8128,9 @@ os_readv_impl(PyObject *module, int fd, PyObject *buffers)
         return -1;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         n = readv(fd, iov, cnt);
-        Py_END_ALLOW_THREADS
+        
     } while (n < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 
     iov_cleanup(iov, buf, cnt);
@@ -8176,11 +8178,11 @@ os_pread_impl(PyObject *module, int fd, int length, Py_off_t offset)
         return NULL;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         n = pread(fd, PyBytes_AS_STRING(buffer), length, offset);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (n < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 
     if (n < 0) {
@@ -8253,19 +8255,19 @@ os_preadv_impl(PyObject *module, int fd, PyObject *buffers, Py_off_t offset,
     }
 #ifdef HAVE_PREADV2
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         n = preadv2(fd, iov, cnt, offset, flags);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (n < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 #else
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         n = preadv(fd, iov, cnt, offset);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (n < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 #endif
 
@@ -8396,13 +8398,13 @@ posix_sendfile(PyObject *self, PyObject *args, PyObject *kwdict)
 
     _Py_BEGIN_SUPPRESS_IPH
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
 #ifdef __APPLE__
         ret = sendfile(in, out, offset, &sbytes, &sf, flags);
 #else
         ret = sendfile(in, out, offset, len, &sf, &sbytes, flags);
 #endif
-        Py_END_ALLOW_THREADS
+        
     } while (ret < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     _Py_END_SUPPRESS_IPH
 
@@ -8445,9 +8447,9 @@ done:
 #ifdef __linux__
     if (offobj == Py_None) {
         do {
-            Py_BEGIN_ALLOW_THREADS
+            
             ret = sendfile(out, in, NULL, count);
-            Py_END_ALLOW_THREADS
+            
         } while (ret < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
         if (ret < 0)
             return (!async_err) ? posix_error() : NULL;
@@ -8458,9 +8460,9 @@ done:
         return NULL;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         ret = sendfile(out, in, &offset, count);
-        Py_END_ALLOW_THREADS
+        
     } while (ret < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (ret < 0)
         return (!async_err) ? posix_error() : NULL;
@@ -8490,9 +8492,9 @@ os_fstat_impl(PyObject *module, int fd)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         res = FSTAT(fd, &st);
-        Py_END_ALLOW_THREADS
+        
     } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     if (res != 0) {
 #ifdef MS_WINDOWS
@@ -8557,7 +8559,7 @@ os_pipe_impl(PyObject *module)
     attr.lpSecurityDescriptor = NULL;
     attr.bInheritHandle = FALSE;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
     ok = CreatePipe(&read, &write, &attr, 0);
     if (ok) {
@@ -8570,23 +8572,23 @@ os_pipe_impl(PyObject *module)
         }
     }
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
 
     if (!ok)
         return PyErr_SetFromWindowsErr(0);
 #else
 
 #ifdef HAVE_PIPE2
-    Py_BEGIN_ALLOW_THREADS
+    
     res = pipe2(fds, O_CLOEXEC);
-    Py_END_ALLOW_THREADS
+    
 
     if (res != 0 && errno == ENOSYS)
     {
 #endif
-        Py_BEGIN_ALLOW_THREADS
+        
         res = pipe(fds);
-        Py_END_ALLOW_THREADS
+        
 
         if (res == 0) {
             if (_Py_set_inheritable(fds[0], 0, NULL) < 0) {
@@ -8680,9 +8682,9 @@ os_writev_impl(PyObject *module, int fd, PyObject *buffers)
     }
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         result = writev(fd, iov, cnt);
-        Py_END_ALLOW_THREADS
+        
     } while (result < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 
     iov_cleanup(iov, buf, cnt);
@@ -8718,11 +8720,11 @@ os_pwrite_impl(PyObject *module, int fd, Py_buffer *buffer, Py_off_t offset)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         size = pwrite(fd, buffer->buf, (size_t)buffer->len, offset);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (size < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 
     if (size < 0 && !async_err)
@@ -8792,19 +8794,19 @@ os_pwritev_impl(PyObject *module, int fd, PyObject *buffers, Py_off_t offset,
     }
 #ifdef HAVE_PWRITEV2
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         result = pwritev2(fd, iov, cnt, offset, flags);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (result < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 #else
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
         result = pwritev(fd, iov, cnt, offset);
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (result < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 #endif
 
@@ -8848,14 +8850,14 @@ os_mkfifo_impl(PyObject *module, path_t *path, int mode, int dir_fd)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
 #ifdef HAVE_MKFIFOAT
         if (dir_fd != DEFAULT_DIR_FD)
             result = mkfifoat(dir_fd, path->narrow, mode);
         else
 #endif
             result = mkfifo(path->narrow, mode);
-        Py_END_ALLOW_THREADS
+        
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
     if (result != 0)
@@ -8900,14 +8902,14 @@ os_mknod_impl(PyObject *module, path_t *path, int mode, dev_t device,
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
 #ifdef HAVE_MKNODAT
         if (dir_fd != DEFAULT_DIR_FD)
             result = mknodat(dir_fd, path->narrow, mode, device);
         else
 #endif
             result = mknod(path->narrow, mode, device);
-        Py_END_ALLOW_THREADS
+        
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
     if (result != 0)
@@ -8991,7 +8993,7 @@ os_ftruncate_impl(PyObject *module, int fd, Py_off_t length)
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         _Py_BEGIN_SUPPRESS_IPH
 #ifdef MS_WINDOWS
         result = _chsize_s(fd, length);
@@ -8999,7 +9001,7 @@ os_ftruncate_impl(PyObject *module, int fd, Py_off_t length)
         result = ftruncate(fd, length);
 #endif
         _Py_END_SUPPRESS_IPH
-        Py_END_ALLOW_THREADS
+        
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
     if (result != 0)
@@ -9033,7 +9035,7 @@ os_truncate_impl(PyObject *module, path_t *path, Py_off_t length)
     if (path->fd != -1)
         return os_ftruncate_impl(module, path->fd, length);
 
-    Py_BEGIN_ALLOW_THREADS
+    
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef MS_WINDOWS
     fd = _wopen(path->wide, _O_WRONLY | _O_BINARY | _O_NOINHERIT);
@@ -9049,7 +9051,7 @@ os_truncate_impl(PyObject *module, path_t *path, Py_off_t length)
     result = truncate(path->narrow, length);
 #endif
     _Py_END_SUPPRESS_IPH
-    Py_END_ALLOW_THREADS
+    
     if (result < 0)
         return path_error(path);
 
@@ -9091,9 +9093,9 @@ os_posix_fallocate_impl(PyObject *module, int fd, Py_off_t offset,
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         result = posix_fallocate(fd, offset, length);
-        Py_END_ALLOW_THREADS
+        
     } while (result == EINTR && !(async_err = PyErr_CheckSignals()));
 
     if (result == 0)
@@ -9138,9 +9140,9 @@ os_posix_fadvise_impl(PyObject *module, int fd, Py_off_t offset,
     int async_err = 0;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         result = posix_fadvise(fd, offset, length, advice);
-        Py_END_ALLOW_THREADS
+        
     } while (result == EINTR && !(async_err = PyErr_CheckSignals()));
 
     if (result == 0)
@@ -9580,9 +9582,9 @@ os_fstatvfs_impl(PyObject *module, int fd)
     struct statvfs st;
 
     do {
-        Py_BEGIN_ALLOW_THREADS
+        
         result = fstatvfs(fd, &st);
-        Py_END_ALLOW_THREADS
+        
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
     if (result != 0)
@@ -9614,7 +9616,7 @@ os_statvfs_impl(PyObject *module, path_t *path)
     int result;
     struct statvfs st;
 
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_FSTATVFS
     if (path->fd != -1) {
 #ifdef __APPLE__
@@ -9629,7 +9631,7 @@ os_statvfs_impl(PyObject *module, path_t *path)
     else
 #endif
         result = statvfs(path->narrow, &st);
-    Py_END_ALLOW_THREADS
+    
 
     if (result) {
         return path_error(path);
@@ -9656,9 +9658,9 @@ os__getdiskusage_impl(PyObject *module, path_t *path)
     BOOL retval;
     ULARGE_INTEGER _, total, free;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     retval = GetDiskFreeSpaceExW(path->wide, &_, &total, &free);
-    Py_END_ALLOW_THREADS
+    
     if (retval == 0)
         return PyErr_SetFromWindowsErr(0);
 
@@ -10739,13 +10741,13 @@ check_ShellExecute()
 
     /* only recheck */
     if (-1 == has_ShellExecute) {
-        Py_BEGIN_ALLOW_THREADS
+        
         /* Security note: this call is not vulnerable to "DLL hijacking".
            SHELL32 is part of "KnownDLLs" and so Windows always load
            the system SHELL32.DLL, even if there is another SHELL32.DLL
            in the DLL search path. */
         hShell32 = LoadLibraryW(L"SHELL32");
-        Py_END_ALLOW_THREADS
+        
         if (hShell32) {
             *(FARPROC*)&Py_ShellExecuteW = GetProcAddress(hShell32,
                                             "ShellExecuteW");
@@ -10796,10 +10798,10 @@ os_startfile_impl(PyObject *module, path_t *filepath, Py_UNICODE *operation)
             "startfile not available on this platform");
     }
 
-    Py_BEGIN_ALLOW_THREADS
+    
     rc = Py_ShellExecuteW((HWND)0, operation, filepath->wide,
                           NULL, NULL, SW_SHOWNORMAL);
-    Py_END_ALLOW_THREADS
+    
 
     if (rc <= (HINSTANCE)32) {
         win32_error_object("startfile", filepath->object);
@@ -10984,14 +10986,14 @@ os_getxattr_impl(PyObject *module, path_t *path, path_t *attribute,
             return NULL;
         ptr = PyBytes_AS_STRING(buffer);
 
-        Py_BEGIN_ALLOW_THREADS;
+        ;
         if (path->fd >= 0)
             result = fgetxattr(path->fd, attribute->narrow, ptr, buffer_size);
         else if (follow_symlinks)
             result = getxattr(path->narrow, attribute->narrow, ptr, buffer_size);
         else
             result = lgetxattr(path->narrow, attribute->narrow, ptr, buffer_size);
-        Py_END_ALLOW_THREADS;
+        ;
 
         if (result < 0) {
             Py_DECREF(buffer);
@@ -11041,7 +11043,7 @@ os_setxattr_impl(PyObject *module, path_t *path, path_t *attribute,
     if (fd_and_follow_symlinks_invalid("setxattr", path->fd, follow_symlinks))
         return NULL;
 
-    Py_BEGIN_ALLOW_THREADS;
+    ;
     if (path->fd > -1)
         result = fsetxattr(path->fd, attribute->narrow,
                            value->buf, value->len, flags);
@@ -11051,7 +11053,7 @@ os_setxattr_impl(PyObject *module, path_t *path, path_t *attribute,
     else
         result = lsetxattr(path->narrow, attribute->narrow,
                            value->buf, value->len, flags);
-    Py_END_ALLOW_THREADS;
+    ;
 
     if (result) {
         path_error(path);
@@ -11089,14 +11091,14 @@ os_removexattr_impl(PyObject *module, path_t *path, path_t *attribute,
     if (fd_and_follow_symlinks_invalid("removexattr", path->fd, follow_symlinks))
         return NULL;
 
-    Py_BEGIN_ALLOW_THREADS;
+    ;
     if (path->fd > -1)
         result = fremovexattr(path->fd, attribute->narrow);
     else if (follow_symlinks)
         result = removexattr(path->narrow, attribute->narrow);
     else
         result = lremovexattr(path->narrow, attribute->narrow);
-    Py_END_ALLOW_THREADS;
+    ;
 
     if (result) {
         return path_error(path);
@@ -11152,14 +11154,14 @@ os_listxattr_impl(PyObject *module, path_t *path, int follow_symlinks)
             break;
         }
 
-        Py_BEGIN_ALLOW_THREADS;
+        ;
         if (path->fd > -1)
             length = flistxattr(path->fd, buffer, buffer_size);
         else if (follow_symlinks)
             length = listxattr(name, buffer, buffer_size);
         else
             length = llistxattr(name, buffer, buffer_size);
-        Py_END_ALLOW_THREADS;
+        ;
 
         if (length < 0) {
             if (errno == ERANGE) {
@@ -12123,9 +12125,9 @@ ScandirIterator_closedir(ScandirIterator *iterator)
         return;
 
     iterator->handle = INVALID_HANDLE_VALUE;
-    Py_BEGIN_ALLOW_THREADS
+    
     FindClose(handle);
-    Py_END_ALLOW_THREADS
+    
 }
 
 static PyObject *
@@ -12141,9 +12143,9 @@ ScandirIterator_iternext(ScandirIterator *iterator)
 
     while (1) {
         if (!iterator->first_time) {
-            Py_BEGIN_ALLOW_THREADS
+            
             success = FindNextFileW(iterator->handle, file_data);
-            Py_END_ALLOW_THREADS
+            
             if (!success) {
                 /* Error or no more files */
                 if (GetLastError() != ERROR_NO_MORE_FILES)
@@ -12187,13 +12189,13 @@ ScandirIterator_closedir(ScandirIterator *iterator)
         return;
 
     iterator->dirp = NULL;
-    Py_BEGIN_ALLOW_THREADS
+    
 #ifdef HAVE_FDOPENDIR
     if (iterator->path.fd != -1)
         rewinddir(dirp);
 #endif
     closedir(dirp);
-    Py_END_ALLOW_THREADS
+    
     return;
 }
 
@@ -12211,9 +12213,9 @@ ScandirIterator_iternext(ScandirIterator *iterator)
 
     while (1) {
         errno = 0;
-        Py_BEGIN_ALLOW_THREADS
+        
         direntp = readdir(iterator->dirp);
-        Py_END_ALLOW_THREADS
+        
 
         if (!direntp) {
             /* Error or no more files */
@@ -12414,9 +12416,9 @@ os_scandir_impl(PyObject *module, path_t *path)
     if (!path_strW)
         goto error;
 
-    Py_BEGIN_ALLOW_THREADS
+    
     iterator->handle = FindFirstFileW(path_strW, &iterator->file_data);
-    Py_END_ALLOW_THREADS
+    
 
     PyMem_Free(path_strW);
 
@@ -12433,9 +12435,9 @@ os_scandir_impl(PyObject *module, path_t *path)
         if (fd == -1)
             goto error;
 
-        Py_BEGIN_ALLOW_THREADS
+        
         iterator->dirp = fdopendir(fd);
-        Py_END_ALLOW_THREADS
+        
     }
     else
 #endif
@@ -12445,18 +12447,18 @@ os_scandir_impl(PyObject *module, path_t *path)
         else
             path_str = ".";
 
-        Py_BEGIN_ALLOW_THREADS
+        
         iterator->dirp = opendir(path_str);
-        Py_END_ALLOW_THREADS
+        
     }
 
     if (!iterator->dirp) {
         path_error(&iterator->path);
 #ifdef HAVE_FDOPENDIR
         if (fd != -1) {
-            Py_BEGIN_ALLOW_THREADS
+            
             close(fd);
-            Py_END_ALLOW_THREADS
+            
         }
 #endif
         goto error;
@@ -13596,3 +13598,4 @@ INITFUNC(void)
 #ifdef __cplusplus
 }
 #endif
+
